// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  role Role @default(USER)
  address String? @db.LongText
  city String?
  province String?
  phoneNumber String?
  resetToken String?
  resetTokenExpiryTime DateTime?
  sentMessages Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  cart Cart?
  orders Order[]
  complaints Complaint[]
  wishlist Wishlist[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Category {
  id String @id @default(uuid())
  name String
  slug String @unique
  imageUrl String?
  products Product[]
}

model Product {
  id String @id @default(uuid())
  name String
  slug String @unique
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String
  description String? @db.LongText
  color String
  price Float
  status ProductStatus @default(PUBLISHED)
  productSizes ProductSize[]
  productPhotos ProductPhoto[]
  wishlist Wishlist[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
}

model ProductSize {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  name       String
  stock      Int      @default(0)
  orderItems OrderItem[]
  cartItems CartItem[]
}

model ProductPhoto {
  id String @id @default(uuid())
  product Product @relation(fields: [productId], references: [id])
  productId String
  imageUrl String
  public_id String?
  thumbnail Boolean @default(false)
}

model Message {
  id String @id @default(uuid())
  content String @db.LongText
  sender User @relation("SentMessages", fields: [senderId], references: [id])
  senderId String
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Complaint {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  message String @db.LongText
  orderItem OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId String
  status ComplaintStatus @default(OPEN)
  adminMessage String? @db.LongText
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  reviewed_at DateTime?
  resolved_at DateTime?
  canceled_at DateTime?
}

model Cart {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String @unique
  items CartItem[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model CartItem {
  id String @id @default(uuid())
  cart Cart @relation(fields: [cartId], references: [id])
  cartId String
  productSize ProductSize @relation(fields: [productSizeId], references: [id])
  productSizeId String
  quantity Int
}

model Order {
  id String @id @default(uuid())
  orderNumber String @unique
  user User @relation(fields: [userId], references: [id])
  userId String
  email String
  phoneNumber String
  address String
  city String
  province String
  status Status @default(PENDING)
  payment PaymentStatus @default(UNPAID)
  orderItems OrderItem[]
  paymentMethod PaymentMethod @default(TRANSFER)
  paid_at DateTime?
  payment_confirmed_at DateTime?
  rejected_at DateTime?
  no_resi String?
  sent_at DateTime?
  arrived_at DateTime?
  complained_at DateTime?
  finished_at DateTime?
  canceled_at DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model OrderItem {
  id String @id @default(uuid())
  order Order @relation(fields: [orderId], references: [id])
  orderId String
  productSize ProductSize @relation(fields: [productSizeId], references: [id])
  productSizeId String
  quantity Int
  price Float
  complaints Complaint[]
  complained_at DateTime?
}

model Wishlist {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  @@unique([userId, productId])
}

enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING
  PROCESSED
  SENT
  COMPLAINED
  FINISHED
  CANCELED
  REJECTED
}

enum PaymentStatus {
  UNPAID
  PAID
  REJECTED
}

enum PaymentMethod {
  TRANSFER
  CREDITCARD
  INDOMARET
}

enum ComplaintStatus {
  OPEN
  CANCELED
  REVIEWED
  RESOLVED
}

enum ProductStatus {
  ARCHIVED
  PUBLISHED
}
